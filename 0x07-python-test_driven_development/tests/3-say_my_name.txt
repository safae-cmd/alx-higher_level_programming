import unittest
import sys
from io import StringIO

class TestSayMyName(unittest.TestCase):

    def test_say_my_name(self):
        """
        Test cases for say_my_name function.
        """

        # Redirect stdout to capture the output
        saved_stdout = sys.stdout
        output = StringIO()
        sys.stdout = output

        # Importing the function from the module
        say_my_name = __import__('3-say_my_name').say_my_name

        # Test with both first and last name
        expected_output = "My name is Betty Holberton\n"
        say_my_name("Betty", "Holberton")
        self.assertEqual(output.getvalue(), expected_output)

        # Test with only first name
        expected_output = "My name is Luis \n"
        say_my_name("Luis")
        self.assertEqual(output.getvalue(), expected_output)

        # Test with None as last name
        expected_error = "TypeError: last_name must be a string\n"
        with self.assertRaises(TypeError) as cm:
            say_my_name("John", None)
        self.assertEqual(str(cm.exception), expected_error)

        # Test with None as first name
        expected_error = "TypeError: first_name must be a string\n"
        with self.assertRaises(TypeError) as cm:
            say_my_name(None)
        self.assertEqual(str(cm.exception), expected_error)

        # Test with number as first name
        expected_error = "TypeError: first_name must be a string\n"
        with self.assertRaises(TypeError) as cm:
            say_my_name(1)
        self.assertEqual(str(cm.exception), expected_error)

        # Test with number as last name
        expected_error = "TypeError: last_name must be a string\n"
        with self.assertRaises(TypeError) as cm:
            say_my_name("Betty", 0)
        self.assertEqual(str(cm.exception), expected_error)

        # Test with missing arguments
        expected_error = "TypeError: say_my_name() missing 1 required positional argument: 'first_name'\n"
        with self.assertRaises(TypeError) as cm:
            say_my_name()
        self.assertEqual(str(cm.exception), expected_error)


if __name__ == '__main__':
    unittest.main()

