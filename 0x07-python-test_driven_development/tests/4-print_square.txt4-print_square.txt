import unittest
from io import StringIO
import sys

class TestPrintSquare(unittest.TestCase):

    def test_print_square(self):
        """
        Test cases for print_square function.
        """

        # Redirect stdout to capture the output
        saved_stdout = sys.stdout
        output = StringIO()
        sys.stdout = output

        # Importing the function from the module
        print_square = __import__('my_module').print_square

        # Test with size = 0
        expected_output = ""
        print_square(0)
        self.assertEqual(output.getvalue(), expected_output)

        # Test with size = 1
        expected_output = "#\n"
        print_square(1)
        self.assertEqual(output.getvalue(), expected_output)

        # Test with size = 3
        expected_output = "###\n###\n###\n"
        print_square(3)
        self.assertEqual(output.getvalue(), expected_output)

        # Test with size = 5
        expected_output = "#####\n#####\n#####\n#####\n#####\n"
        print_square(5)
        self.assertEqual(output.getvalue(), expected_output)

        # Test with negative size
        expected_error = "ValueError: size must be >= 0\n"
        with self.assertRaises(ValueError) as cm:
            print_square(-2)
        self.assertEqual(str(cm.exception), expected_error)

        # Test with non-integer size
        expected_error = "TypeError: size must be an integer\n"
        with self.assertRaises(TypeError) as cm:
            print_square(3.5)
        self.assertEqual(str(cm.exception), expected_error)


if __name__ == '__main__':
    unittest.main()

